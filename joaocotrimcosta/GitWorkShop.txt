
JoaoC@Lenovo-Martolas MINGW64 ~
$ git
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

$ git init
Initialized empty Git repository in C:/Users/JoaoC/.git/

$ git clone https://github.com/esgt-tpsi/gitworkshop
Cloning into 'gitworkshop'...
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.

#Abre a pasta no windows
$ explorer .

JoaoC@Lenovo-Martolas MINGW64 ~ (master)
$ cd gitworkshop/


#Puxa o catalogo da net
$ git fetch
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 279 bytes | 15.00 KiB/s, done.
From https://github.com/esgt-tpsi/gitworkshop
   0914fbf..e3f5312  main       -> origin/main

#aplica as alterações localmente sentido web -> local
$ git pull
Updating 0914fbf..e3f5312
Fast-forward
 README.md | 2 ++
 1 file changed, 2 insertions(+)

#cria novo ramo localmente
JoaoC@Lenovo-Martolas MINGW64 ~/gitworkshop (main)
$ git checkout -B joaocotrimcosta
Switched to a new branch 'joaocotrimcosta'

#mudança de pasta
JoaoC@Lenovo-Martolas MINGW64 ~/gitworkshop (joaocotrimcosta)
$ cd joaocotrimcosta/

#addiciona ficheiro
JoaoC@Lenovo-Martolas MINGW64 ~/gitworkshop/joaocotrimcosta (joaocotrimcosta)
$ git add JotaP.txt

#commit
JoaoC@Lenovo-Martolas MINGW64 ~/gitworkshop/joaocotrimcosta (joaocotrimcosta)
$ git commit -m "Commit number 1"
[joaocotrimcosta c4c45a1] Commit number 1
 1 file changed, 1 insertion(+)
 create mode 100644 joaocotrimcosta/JotaP.txt

#dá erro porque não existe o ramo remotamente
JoaoC@Lenovo-Martolas MINGW64 ~/gitworkshop/joaocotrimcosta (joaocotrimcosta)
$ git push
fatal: The current branch joaocotrimcosta has no upstream branch.
To push the current branch and set the remote as upstream, use
# indica o comando a correr
    git push --set-upstream origin joaocotrimcosta

To have this happen automatically for branches without a tracking
upstream, see 'push.autoSetupRemote' in 'git help config'.


#cria ramo remotamete
$ git push --set-upstream origin joaocotrimcosta

